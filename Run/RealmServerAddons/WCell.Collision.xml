<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WCell.Collision</name>
    </assembly>
    <members>
        <member name="M:WCell.Collision.Addon.CollisionAddon.GetLocalizedName(System.Globalization.CultureInfo)">
            <summary>
            The localized name, in the given culture
            </summary>
        </member>
        <member name="P:WCell.Collision.Addon.CollisionAddon.Name">
            <summary>
            The culture-invariant name of this Addon
            </summary>
        </member>
        <member name="P:WCell.Collision.Addon.CollisionAddon.ShortName">
            <summary>
            A shorthand name of the Addon that does not contain any spaces.
             Used as unique ID for this Addon.
            </summary>
        </member>
        <member name="P:WCell.Collision.Addon.CollisionAddon.Author">
            <summary>
            The name of the Author
            </summary>
        </member>
        <member name="P:WCell.Collision.Addon.CollisionAddon.Website">
            <summary>
            Website (where this Addon can be found)
            </summary>
        </member>
        <member name="M:WCell.Collision.WMO.IntersectsWith(WCell.Util.Graphics.Ray@,System.Single@)">
            <summary>
            Returns the earliest time at which a ray intersects the polys in this Building.
            Notice that the ray should be in world coords.
            </summary>
        </member>
        <member name="M:WCell.Collision.WMO.IntersectsWith(WCell.Util.Graphics.Ray@,System.Single@,WCell.Util.Graphics.Vector3@)">
            <summary>
            Determines the earliest point of intersection between a ray and this Building.
            </summary>
            <param name="ray">The Ray to test against.</param>
            <param name="tMax">The earliest point of intersection (tmax*Ray.Direction + Ray.Position)</param>
            <param name="intersection">The vectorized point of first intersection</param>
            <returns></returns>
        </member>
        <member name="M:WCell.Collision.WMO.GetLocalRay(WCell.Util.Graphics.Ray@)">
            <summary>
            Transforms a Ray in World Coords into Building-space coords
            </summary>
            <param name="ray">A ray in World Coordinates</param>
            <returns>A Ray in Building Coords</returns>
        </member>
        <member name="M:WCell.Collision.WMO.ReCenter(WCell.Util.Graphics.Vector3)">
            <summary>
            Re-centers a vector relative to the World center to the Building center
            </summary>
            <param name="vec">A vector relative to the World center</param>
            <returns>A vector relative to the building center</returns>
        </member>
        <member name="M:WCell.Collision.WorldMapTile.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="file">The full path to the TileInfo file to open.</param>
        </member>
        <member name="T:WCell.Collision.PointX2D">
            <summary>
            Fixed 2D point (using integers for components)
            </summary>
        </member>
        <member name="M:WCell.Collision.WorldMapObjects.GetWMOHeight(WCell.Constants.World.MapId,WCell.Util.Graphics.Vector3)">
            <summary>
            Returns the height of the floor directly beneath a position on the world map.
            </summary>
            <param name="map">The MapId of the map the position is on</param>
            <param name="pos">The position to check the floor height at</param>
        </member>
        <member name="M:WCell.Collision.WorldMapObjects.HasLOS(WCell.Constants.World.MapId,WCell.Util.Graphics.Vector3,WCell.Util.Graphics.Vector3)">
            <summary>
            Whether there is a clear line of sight between two points.
            </summary>
            <param name="map">The MapId of the map in question</param>
            <param name="startPos">Vector in World Coords of the start position</param>
            <param name="endPos">Vector in World Coords of the end position</param>
            <returns>True of a clear line of sight exists</returns>
        </member>
        <member name="M:WCell.Collision.WorldMapObjects.CheckCollision(WCell.Constants.World.MapId,WCell.Util.Graphics.Vector3,WCell.Util.Graphics.Vector3)">
            <summary>
            Whether the line from startPos to endPos intersects a Building on this Map
            </summary>
            <param name="map">The MapId of the Map in question</param>
            <param name="startPos">Vector in World Coords of the start point</param>
            <param name="endPos">Vector in World Coords of the end point</param>
            <returns>Null if no collision occurs, else the earliest time of collision. 
            To get the point of collision, a vector calculation of (startPos + (endPos - startPos)*returnValue) is required.</returns>
        </member>
        <member name="M:WCell.Collision.WMOGroup.IntersectsWith(WCell.Util.Graphics.Ray@,System.Single@)">
            <summary>
            Returns the earliest time this BuildingGroup Intersects the given ray.
            Notice that the Ray <i>must</i> be transformed to model space prior to calling this function.
            </summary>
        </member>
        <member name="M:WCell.Collision.CollisionHelper.RayTriangleIntersect(WCell.Util.Graphics.Vector3@,WCell.Util.Graphics.Vector3@,WCell.Util.Graphics.Vector3@,WCell.Util.Graphics.Ray@,System.Single@,System.Single@)">
            <summary>
            Point of intersection = (1 - u - v)*vert0 + u*vert1 + v*vert2.
            t is the distance from ray.Position to the point of intersection.
            </summary>
        </member>
        <member name="F:WCell.Collision.QuadTree`1.m_root">
            <summary>
            The root QuadTreeNode
            </summary>
        </member>
        <member name="F:WCell.Collision.QuadTree`1.m_rectangle">
            <summary>
            The bounds of this QuadTree
            </summary>
        </member>
        <member name="M:WCell.Collision.QuadTree`1.Insert(`0)">
            <summary>
            Insert the feature into the QuadTree
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:WCell.Collision.QuadTree`1.Query(WCell.Util.Graphics.BoundingBox)">
            <summary>
            Query the QuadTree, returning the items that are in the given area
            </summary>
            <param name="area"></param>
            <returns></returns>
        </member>
        <member name="M:WCell.Collision.QuadTree`1.ForEach(WCell.Collision.QuadTree{`0}.QTAction)">
            <summary>
            Do the specified action for each item in the quadtree
            </summary>
            <param name="action"></param>
        </member>
        <member name="P:WCell.Collision.QuadTree`1.Count">
            <summary>
            Get the count of items in the QuadTree
            </summary>
        </member>
        <member name="T:WCell.Collision.QuadTree`1.QTAction">
            <summary>
            An delegate that performs an action on a QuadTreeNode
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:WCell.Collision.QuadTreeNode`1.#ctor(WCell.Util.Graphics.BoundingBox)">
            <summary>
            Construct a quadtree node with the given bounds 
            </summary>
        </member>
        <member name="F:WCell.Collision.QuadTreeNode`1.m_contents">
            <summary>
            The contents of this node.
            Note that the contents have no limit: this is not the standard way to impement a QuadTree
            </summary>
        </member>
        <member name="F:WCell.Collision.QuadTreeNode`1.m_nodes">
            <summary>
            The child nodes of the QuadTree
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:WCell.Collision.QuadTreeNode`1.Query(WCell.Util.Graphics.BoundingBox)" -->
        <member name="M:WCell.Collision.QuadTreeNode`1.Insert(`0)">
            <summary>
            Insert an item to this node
            </summary>
        </member>
        <member name="M:WCell.Collision.QuadTreeNode`1.Remove(`0)">
            <summary>
            Remove an item from this node
            </summary>
        </member>
        <member name="M:WCell.Collision.QuadTreeNode`1.CreateSubNodes">
            <summary>
            Internal method to create the subnodes (partitions space)
            </summary>
        </member>
        <member name="P:WCell.Collision.QuadTreeNode`1.IsEmpty">
            <summary>
            Is the node empty
            </summary>
        </member>
        <member name="P:WCell.Collision.QuadTreeNode`1.Bounds">
            <summary>
            Area of the quadtree node
            </summary>
        </member>
        <member name="P:WCell.Collision.QuadTreeNode`1.Count">
            <summary>
            Total number of nodes in this node and all SubNodes
            </summary>
        </member>
        <member name="P:WCell.Collision.QuadTreeNode`1.SubTreeContents">
            <summary>
            Return the contents of this node and all subnodes in the tree below this one.
            </summary>
        </member>
        <member name="M:WCell.Collision.M2.ShortestDistanceTo(WCell.Util.Graphics.Ray@,System.Single@)">
            <summary>
            Returns the earliest time at which a ray intersects the polys in this model.
            Notice that the ray should be in world coords.
            </summary>
        </member>
    </members>
</doc>
