<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WCell.MPQTool</name>
    </assembly>
    <members>
        <member name="T:WCell.MPQTool.StormLibWrapper.ErrorHandler">
            <summary>
            StormLib nativ error handler.
            </summary>
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.ErrorHandler.ThrowOnFailure(System.Boolean,System.String)">
            <summary>
            Handles the return value of native StormLib calls and throws an appropriate exception when an error happens.
            </summary>
            <param name="returnValue">The return value of the StormLib call.</param>
            <param name="exceptionMessage">The message of the exception to throw.</param>
            <remarks>
            The <see cref="T:WCell.MPQTool.StormLibWrapper.StormLibException"/> contains the <see cref="P:WCell.MPQTool.StormLibWrapper.StormLibException.ErrorCode"/> of the failed call.
            </remarks>
        </member>
        <member name="T:MpqReader.MpqHuffman">
            <summary>
            A decompressor for MPQ's huffman compression
            </summary>
        </member>
        <member name="T:WCell.MPQTool.StormLibWrapper.NativeMethods">
            <summary>
            Contains the native StormLib methods used by the MPQ classes.
            </summary>
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.NativeMethods.OpenArchive(System.String,System.UInt32,WCell.MPQTool.StormLibWrapper.OpenArchiveFlags,System.IntPtr@)">
             Return Type: BOOL->int
            lpFileName: LPCSTR->CHAR*
            dwPriority: DWORD->unsigned int
            dwFlags: DWORD->unsigned int
            hMPQ: HANDLE*
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.NativeMethods.CloseArchive(System.IntPtr)">
             Return Type: BOOL->int
            hMPQ: HANDLE->void*
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.NativeMethods.GetArchiveName(System.IntPtr,System.String,System.UInt32)">
             Return Type: BOOL->int
            hMPQ: HANDLE->void*
            lpBuffer: LPCSTR->CHAR*
            dwBufferLength: DWORD->unsigned int
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.NativeMethods.OpenFileEx(System.IntPtr,System.String,WCell.MPQTool.StormLibWrapper.OpenFileFlags,System.IntPtr@)">
             Return Type: BOOL->int
            hMPQ: HANDLE->void*
            lpFileName: LPCSTR->CHAR*
            dwSearchScope: DWORD->unsigned int
            hFile: HANDLE*
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.NativeMethods.ListFileFindFirst(System.IntPtr,System.String,System.String,WCell.MPQTool.StormLibWrapper.FileFindData@)">
            <summary>
            Returns data about the first file in the ListFile that matches the given search mask
            </summary>
            <param name="archiveHandle">Handle of the open archive.</param>
            <param name="fileName">Name of the listfile that will be used for searching. 
            If this parameter is NULL, the function searches the MPQ internal listfile (if any).</param>
            <param name="searchMask">Name of the search mask. "*" will return all files.</param>
            <param name="fileData">A FileFindData structure with the search result.</param>
            <returns>A handle for the Search object for use with ListFileFindNext.</returns>
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.NativeMethods.ListFileFindNext(System.IntPtr,WCell.MPQTool.StormLibWrapper.FileFindData@)">
            <summary>
            Finds the next file in the list file with the attributes defined in ListFileFindFirst.
            </summary>
            <param name="searchHandle">Handle to the search object created with ListFileFindFirst</param>
            <param name="fileData">A FileFindData structure with the search result.</param>
            <returns>A handle for the updated Search object</returns>
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.NativeMethods.CloseFile(System.IntPtr)">
             Return Type: BOOL->int
            hFile: HANDLE->void*
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.NativeMethods.GetFileSize(System.IntPtr,System.UInt32@)">
             Return Type: DWORD->unsigned int
            hFile: HANDLE->void*
            lpFileSizeHigh: LPDWORD->DWORD*
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.NativeMethods.GetFileName(System.IntPtr,System.String,System.UInt32)">
             Return Type: BOOL->int
            hFile: HANDLE->void*
            lpBuffer: LPCSTR->CHAR*
            dwBufferLength: DWORD->unsigned int
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.NativeMethods.SetFilePointer(System.IntPtr,System.Int32,System.Int32@,System.UInt32)">
             Return Type: DWORD->unsigned int
            hFile: HANDLE->void*
            lDistanceToMove: int
            lplDistanceToMoveHigh: PLONG->LONG*
            dwMoveMethod: DWORD->unsigned int
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.NativeMethods.ReadFile(System.IntPtr,System.IntPtr,System.UInt32,System.UInt32@,System.IntPtr)">
             Return Type: BOOL->int
            hFile: HANDLE->void*
            lpBuffer: LPVOID->void*
            nNumberOfBytesToRead: DWORD->unsigned int
            lpNumberOfBytesRead: LPDWORD->DWORD*
            lpOverlapped: LPOVERLAPPED->_OVERLAPPED*
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.NativeMethods.SetLocale(System.UInt32)">
             Return Type: LCID->DWORD->unsigned int
            nNewLocale: LCID->DWORD->unsigned int
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.NativeMethods.GetBasePath(System.String,System.UInt32)">
             Return Type: BOOL->int
            lpBuffer: LPCSTR->CHAR*
            dwBufferLength: DWORD->unsigned int
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.NativeMethods.SetBasePath(System.String)">
             Return Type: BOOL->int
            lpNewBasePath: LPCSTR->CHAR*
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.NativeMethods.Compress(System.IntPtr,System.Int32@,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
             Return Type: BOOL->int
            pbOutBuffer: char*
            pdwOutLength: int*
            pbInBuffer: char*
            dwInLength: int
            uCmp: int
            uCmpType: int
            nCmpLevel: int
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.NativeMethods.Decompress(System.IntPtr,System.Int32@,System.IntPtr,System.Int32)">
             Return Type: BOOL->int
            pbOutBuffer: char*
            pdwOutLength: int*
            pbInBuffer: char*
            dwInLength: int
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.MpqStream.#ctor(WCell.MPQTool.StormLibWrapper.MpqFile,System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:WCell.MPQTool.StormLibWrapper.MpqStream"/> class.
            </summary>
            <param name="mpqFile">The MPQ file that owns this stream.</param>
            <param name="fileHandle">The file handle.</param>
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.MpqStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.MpqStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> or <paramref name="count"/> is negative. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.MpqStream.ReadCoTaskMem(System.Int32,System.IntPtr@)">
            <summary>
            Reads from the stream and returns a native buffer. The buffer must be freed using <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)"/>.
            </summary>
            <param name="count">The number of bytes to read.</param>
            <param name="buffer">The native buffer that contains the bytes read.</param>
            <returns>The number of bytes read.</returns>
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.MpqStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.MpqStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.MpqStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> or <paramref name="count"/> is negative. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.MpqStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.Stream"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:WCell.MPQTool.StormLibWrapper.MpqStream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
            <value></value>
            <returns>true if the stream supports reading; otherwise, false.</returns>
        </member>
        <member name="P:WCell.MPQTool.StormLibWrapper.MpqStream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
            <value></value>
            <returns>true if the stream supports seeking; otherwise, false.</returns>
        </member>
        <member name="P:WCell.MPQTool.StormLibWrapper.MpqStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
            <value></value>
            <returns>true if the stream supports writing; otherwise, false.</returns>
        </member>
        <member name="P:WCell.MPQTool.StormLibWrapper.MpqStream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
            <value></value>
            <returns>A long value representing the length of the stream in bytes.</returns>
            <exception cref="T:System.NotSupportedException">A class derived from Stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="P:WCell.MPQTool.StormLibWrapper.MpqStream.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
            <value></value>
            <returns>The current position within the stream.</returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:WCell.MPQTool.DBC.DBCReader.GetStringMatchPct(System.UInt32,System.Single)">
            <summary>
            Gets the percentage of rows that might have strings in the given col.
            Returns 0 if there isnt at least <code>uniquePct</code> percent of unique string-indeces in this column.
            </summary>
        </member>
        <member name="P:WCell.MPQTool.DBC.DBCReader.IrregularColumnSize">
            <summary>
            Irregular means that we don't only have 4 byte fields (its only a guess)
            </summary>
        </member>
        <member name="P:WCell.MPQTool.DBC.DBCReader.RecordSize">
            <summary>
            Size of each record
            </summary>
        </member>
        <member name="P:WCell.MPQTool.DBC.DBCReader.RecordCount">
            <summary>
            Amount of existing records
            </summary>
        </member>
        <member name="P:WCell.MPQTool.DBC.DBCReader.ColumnCount">
            <summary>
            Amount of columns
            </summary>
        </member>
        <member name="P:WCell.MPQTool.DBC.DBCReader.FileName">
            <summary>
            The name of the underlying file
            </summary>
        </member>
        <member name="T:MpqReader.PKLibDecompress">
            <summary>
            A decompressor for PKLib implode/explode
            </summary>
        </member>
        <member name="T:MpqReader.MpqStream">
            <summary>
            A Stream based class for reading a file from an MPQ file
            </summary>
        </member>
        <member name="T:MpqReader.BitStream">
            <summary>
            A utility class for reading groups of bits from a stream
            </summary>
        </member>
        <member name="M:WCell.MPQTool.DBCTool.GetMPQFiles(System.String)">
            <summary>
            Returns all MPQ Files that need processing for the DBC Files
            </summary>
            <param name="strDataFolder">The Folder in which the locale is</param>
            <returns>List of ALL MPQ Files that will have DBC Files in</returns>
        </member>
        <member name="M:WCell.MPQTool.DBCTool.GetFiles(System.String)">
            <summary>
            Find all files inside a folder
            </summary>
            <param name="strParentFolder">The folder to search inside</param>
            <returns>List of files inside this folder</returns>
        </member>
        <member name="M:WCell.MPQTool.DBCTool.GetLocale(System.String)">
            <summary>
            Gets the locale.
            </summary>
            <param name="strDataFolder">The Wow data folder.</param>
            <returns></returns>
        </member>
        <member name="M:WCell.MPQTool.DBCTool.FindWowDir(System.String)">
            <summary>
            Looks for and returns the Wow dir
            </summary>
            <exception cref="T:System.Exception">If dir could not be found</exception>
        </member>
        <member name="M:WCell.MPQTool.DBCTool.Dump(System.String,System.Boolean,System.Boolean)">
            <summary>
            Looks up the wow dir (if not specified) and dumps the DBC files from there)
            </summary>
            <param name="wowDir"></param>
            <param name="clear">Whether to clear the DBC-dir</param>
            <param name="checkClient"></param>
        </member>
        <member name="M:WCell.MPQTool.DBCTool.Compare(System.Single,System.Single)">
            <param name="minColChangePct">The percentage of changed rows for a column to assume that it moved</param>
            <param name="minColMatchPct">The percentage of matching rows between 2 columns to assume that they are identical (col might have moved to that one)</param>
        </member>
        <member name="F:WCell.MPQTool.DBC.Compare.DBCFileComparer.MinColumnChangePct">
            <summary>
            If we have more than this percentage in changes, the column probably moved (or we have strings)
            </summary>
        </member>
        <member name="F:WCell.MPQTool.DBC.Compare.DBCFileComparer.MinColumnMatchPct">
            <summary>
            If we compare 2 columns and have at least this percentage of matches, we can assume that the column moved here
            </summary>
        </member>
        <member name="F:WCell.MPQTool.DBC.Compare.DBCFileComparer.MinStringUniquePct">
            <summary>
            The minimum percentage of unique string indeces to qualify for a string column
            </summary>
        </member>
        <member name="F:WCell.MPQTool.DBC.Compare.DBCFileComparer.MinStringMatchPct">
            <summary>
            The minimum percentage of possible string indeces to qualify for a string column (0 counts as invalid)
            </summary>
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.StormLibException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WCell.MPQTool.StormLibWrapper.StormLibException"/> class.
            </summary>
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.StormLibException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WCell.MPQTool.StormLibWrapper.StormLibException"/> class.
            </summary>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.StormLibException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WCell.MPQTool.StormLibWrapper.StormLibException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.StormLibException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WCell.MPQTool.StormLibWrapper.StormLibException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.StormLibException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WCell.MPQTool.StormLibWrapper.StormLibException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.StormLibException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:WCell.MPQTool.StormLibWrapper.StormLibException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="P:WCell.MPQTool.StormLibWrapper.StormLibException.ErrorCode">
            <summary>
            Gets the error code.
            </summary>
        </member>
        <member name="P:WCell.MPQTool.StormLibWrapper.StormLibException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <returns>The error message that explains the reason for the exception, or an empty string("").</returns>
        </member>
        <member name="T:MpqReader.MpqWavCompression">
            <summary>
            An IMA ADPCM decompress for Mpq files
            </summary>
        </member>
        <member name="F:WCell.MPQTool.DBC.Compare.CompareResultType.ColCount">
            <summary>
            Amount of columns changed.
            Structural change.
            </summary>
        </member>
        <member name="F:WCell.MPQTool.DBC.Compare.CompareResultType.RowLength">
            <summary>
            The length of a single row changed.
            Structural change.
            </summary>
        </member>
        <member name="F:WCell.MPQTool.DBC.Compare.CompareResultType.RowCount">
            <summary>
            Content change (nothing that requires software updates)
            </summary>
        </member>
        <member name="F:WCell.MPQTool.DBC.Compare.CompareResultType.New">
            <summary>
            New file
            </summary>
        </member>
        <member name="F:WCell.MPQTool.DBC.Compare.CompareResultType.Deprecated">
            <summary>
            Deprecated file (not existant anymore)
            </summary>
        </member>
        <member name="P:MpqReader.MpqArchive.ExternalListFile">
            <summary>
            Gets or sets the external list file. This setting overrides any list file contained in the archive
            </summary>
            <value>The external list file.</value>
        </member>
        <member name="P:MpqReader.MpqArchive.Files">
            <summary>
            Returns a collection of file infos for the archive. The archive must contain "ListFileName" (default "(listfile)") for this to work.
            </summary>
            <value>The files.</value>
        </member>
        <member name="F:WCell.MPQTool.StormLibWrapper.FileFindData.FilePath">
            <summary>
            Name of the found file
            </summary>
        </member>
        <member name="F:WCell.MPQTool.StormLibWrapper.FileFindData.PlainName">
            <summary>
            Plain name of the found file
            </summary>
        </member>
        <member name="F:WCell.MPQTool.StormLibWrapper.FileFindData.HashIndex">
            <summary>
            Hash table index for the file
            </summary>
        </member>
        <member name="F:WCell.MPQTool.StormLibWrapper.FileFindData.BlockIndex">
            <summary>
            Block table index for the file
            </summary>
        </member>
        <member name="F:WCell.MPQTool.StormLibWrapper.FileFindData.FileSize">
            <summary>
            Uncompressed size of the file, in bytes
            </summary>
        </member>
        <member name="F:WCell.MPQTool.StormLibWrapper.FileFindData.FileFlags">
            <summary>
            MPQ file flags
            </summary>
        </member>
        <member name="F:WCell.MPQTool.StormLibWrapper.FileFindData.CompSize">
            <summary>
            Compressed file size
            </summary>
        </member>
        <member name="F:WCell.MPQTool.StormLibWrapper.FileFindData.FileTimeLo">
            <summary>
            Low 32-bits of the file time (0 if not present)
            </summary>
        </member>
        <member name="F:WCell.MPQTool.StormLibWrapper.FileFindData.FileTimeHi">
            <summary>
            High 32-bits of the file time (0 if not present)
            </summary>
        </member>
        <member name="F:WCell.MPQTool.StormLibWrapper.FileFindData.Locale">
            <summary>
            Locale version
            </summary>
        </member>
        <member name="F:WCell.MPQTool.StormLibWrapper.OpenFileFlags.FromMPQ">
            <summary>
            Open the file from the MPQ archive
            </summary>
        </member>
        <member name="F:WCell.MPQTool.StormLibWrapper.OpenFileFlags.ByIndex">
            <summary>
            The 'szFileName' parameter is actually the file index
            </summary>
        </member>
        <member name="F:WCell.MPQTool.StormLibWrapper.OpenFileFlags.AnyLocale_Reserved">
            <summary>
            Reserved for StormLib internal use
            </summary>
        </member>
        <member name="F:WCell.MPQTool.StormLibWrapper.OpenFileFlags.LocalFile">
            <summary>
            Open the file from the MPQ archive
            </summary>
        </member>
        <member name="F:WCell.MPQTool.StormLibWrapper.OpenArchiveFlags.CreateNew">
            <summary>
            Always creates new MPQ. 
            Fails if the file exists or not an MPQ.
            </summary>
        </member>
        <member name="F:WCell.MPQTool.StormLibWrapper.OpenArchiveFlags.ForceCreate">
            <summary>
            Always creates new MPQ. 
            If the file exists, it will be overwriten
            </summary>
        </member>
        <member name="F:WCell.MPQTool.StormLibWrapper.OpenArchiveFlags.OpenExisting">
            <summary>
            Opens an existing MPQ. 
            If the file doesn't exist, the function fails.
            </summary>
        </member>
        <member name="F:WCell.MPQTool.StormLibWrapper.OpenArchiveFlags.OpenOrCreate">
            <summary>
            Opens an existing MPQ. 
            If the file doesn't exist or it's not an MPQ, the function creates new MPQ.
            </summary>
        </member>
        <member name="F:WCell.MPQTool.StormLibWrapper.OpenArchiveFlags.IgnoreListFile">
            <summary>
            Don't load the internal listfile
            </summary>
        </member>
        <member name="F:WCell.MPQTool.StormLibWrapper.OpenArchiveFlags.IgnoreAttributes">
            <summary>
            Don't open the attributes
            </summary>
        </member>
        <member name="F:WCell.MPQTool.StormLibWrapper.OpenArchiveFlags.OpenAsV1_0">
            <summary>
            Always open the archive as MPQ v 1.00, ignore the "wFormatVersion" variable in the header
            </summary>
        </member>
        <member name="F:WCell.MPQTool.StormLibWrapper.OpenArchiveFlags.ForceCRCCheck">
            <summary>
            On files with MPQ_FILE_SECTOR_CRC, the CRC will be checked when reading file
            </summary>
        </member>
        <member name="F:WCell.MPQTool.StormLibWrapper.OpenArchiveFlags.CreateAttributes">
            <summary>
            Also add the (attributes) file
            </summary>
        </member>
        <member name="F:WCell.MPQTool.StormLibWrapper.OpenArchiveFlags.CreateArchiveV1_0">
            <summary>
            Creates archive with size up to 4GB
            </summary>
        </member>
        <member name="F:WCell.MPQTool.StormLibWrapper.OpenArchiveFlags.CreateArchiveV2_0">
            <summary>
            Create archive with size > 4GB
            </summary>
        </member>
        <member name="T:WCell.MPQTool.StormLibWrapper.MpqFile">
            <summary>
            Represents an MPQ file.
            </summary>
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.MpqFile.#ctor(WCell.MPQTool.StormLibWrapper.MpqArchive,System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:WCell.MPQTool.StormLibWrapper.MpqFile"/> class.
            </summary>
            <param name="archive">The MPQ archive this file is in.</param>
            <param name="fileHandle">The file handle.</param>
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.MpqFile.GetStream">
            <summary>
            Gets a stream of the content of the file.
            </summary>
            <returns>An instance of the <see cref="T:WCell.MPQTool.StormLibWrapper.MpqStream"/> class.</returns>
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.MpqFile.Close">
            <summary>
            Closes the file.
            </summary>
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.MpqFile.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.MpqFile.GetFileSize(System.IntPtr)">
            <summary>
            Gets the file size of an MPQ file using its handle.
            </summary>
            <param name="fileHandle">The handle of the MPQ file.</param>
            <returns>The size of the file, in bytes.</returns>
        </member>
        <member name="P:WCell.MPQTool.StormLibWrapper.MpqFile.Archive">
            <summary>
            Gets the MPQ archive this file is in.
            </summary>
        </member>
        <member name="P:WCell.MPQTool.StormLibWrapper.MpqFile.IsOpen">
            <summary>
            Gets a value indicating whether the file is open.
            </summary>
        </member>
        <member name="P:WCell.MPQTool.StormLibWrapper.MpqFile.Size">
            <summary>
            Gets the size of the file.
            </summary>
        </member>
        <member name="T:WCell.MPQTool.StormLibWrapper.MpqArchive">
            <summary>
            Represents an MPQ archive.
            </summary>
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.MpqArchive.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WCell.MPQTool.StormLibWrapper.MpqArchive"/> class.
            </summary>
            <param name="path">The path to the MPQ archive.</param>
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.MpqArchive.FileExists(System.String)">
            <summary>
            Checks for the existence of a file in the MPQ archive.
            </summary>
            <param name="filePath">The relative path to the file in the archive.</param>
            <returns>True, if the file exists in the MPQ archive; False otherwise.</returns>
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.MpqArchive.OpenFile(System.String)">
            <summary>
            Opens a file in the MPQ archive.
            </summary>
            <param name="filePath">The relative path to the file in the archive.</param>
            <returns>An instance of the <see cref="T:WCell.MPQTool.StormLibWrapper.MpqFile"/> class, representing the file.</returns>
            <exception cref="T:WCell.MPQTool.StormLibWrapper.StormLibException">Thrown when the file could not be opened.</exception>
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.MpqArchive.Close">
            <summary>
            Closes the MPQ archive.
            </summary>
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.MpqArchive.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WCell.MPQTool.StormLibWrapper.MpqArchive.IsValidMpqArchive(System.String)">
            <summary>
            Checks whether a file is a valid MPQ archive that can be opened.
            </summary>
            <param name="path">The path to the MPQ archive.</param>
            <returns>True, if the file is an MPQ archive; False otherwise.</returns>
        </member>
        <member name="P:WCell.MPQTool.StormLibWrapper.MpqArchive.IsOpen">
            <summary>
            Gets a value indicating whether the MPQ archive is open.
            </summary>
        </member>
    </members>
</doc>
